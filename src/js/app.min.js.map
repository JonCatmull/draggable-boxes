{"version":3,"sources":["app.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Boxes","numberOfBoxes","boxesPerRow","targetContainer","this","boxDimensions","toFixed","boxesProperties","name","color","initializedPropertiesCounter","initializedProperties","boxesOrderCounter","boxesPlaceholder","draggingNowBox","value","deleteBoxesContainerElement","document","createElement","classList","add","iconSpanElement","trashImgElement","src","iconOverlayElement","appendChild","x","box","style","width","height","setAttribute","backgroundColor","innerHTML","push","getBoundingClientRect","addDraggable","onMouseDown","evt","contains","which","draggedClone","cloneNode","that","position","querySelector","display","window","addEventListener","moveBox","currentBoxes","querySelectorAll","top","clientY","left","clientX","elementFromPoint","remove","rectBox","rectDragged","bottom","right","draggingNowIndex","insertBefore","nextSibling","reorderBoxes","event","removeChild","splice","parseInt","getAttribute","setTimeout","removeEventListener","start","startFrom","thisBox","_i","_thisBox","indexOf","shuffler","children","boxesToDelete","_i2","_i3","arr1","arr2","j","z","y","Math","random","draggableContainer","getElementById","boxes","init","addBox","shuffleBoxes"],"mappings":"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","file":"app.min.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Boxes = function () {\n    /**\r\n     * Represents Boxes\r\n     * @constructor\r\n     * @param  {number}  numberOfBoxes   The number of boxes to be created\r\n     * @param  {number}  boxesPerRow     Number of boxes per row\r\n     * @param  {HTMLElement} targetContainer The target container where boxes will be created\r\n     * @return                           Doesn't return nothing\r\n     */\n    function Boxes(numberOfBoxes, boxesPerRow, targetContainer) {\n        _classCallCheck(this, Boxes);\n\n        /**\r\n         * Class property for number of boxes\r\n         * @type {number}\r\n         */\n        this.numberOfBoxes = numberOfBoxes;\n        /**\r\n         * Class property for boxes per row\r\n         * @type {number}\r\n         */\n        this.boxesPerRow = boxesPerRow;\n        /**\r\n         * Class property for box each box dimensions\r\n         * @type {number}\r\n         */\n        this.boxDimensions = (100 / boxesPerRow).toFixed(4);\n        /**\r\n         * Class property for element reference to container where boxes will be created\r\n         * @type {HTMLElement}\r\n         */\n        this.targetContainer = targetContainer;\n        /**\r\n         * Class property for predefined boxes properties ( name and color ). Should be array of objects\r\n         * @type {Array}\r\n         * @example {name: 'Alpha', color: '#FFFFFF'}\r\n         */\n        this.boxesProperties = [{\n            name: 'Alpha',\n            color: '#CD6155'\n        }, {\n            name: 'Bravo',\n            color: '#EC7063'\n        }, {\n            name: 'Charlie',\n            color: '#AF7AC5'\n        }, {\n            name: 'Delta',\n            color: '#5499C7'\n        }, {\n            name: 'Echo',\n            color: '#5DADE2'\n        }, {\n            name: 'Foxtrot',\n            color: '#48C9B0'\n        }, {\n            name: 'Golf',\n            color: '#45B39D'\n        }, {\n            name: 'Hotel',\n            color: '#52BE80'\n        }, {\n            name: 'Indigo',\n            color: '#58D68D'\n        }, {\n            name: 'Juliet',\n            color: '#F4D03F'\n        }, {\n            name: 'Kilo',\n            color: '#F5B041'\n        }, {\n            name: 'Lima',\n            color: '#DC7633'\n        }, {\n            name: 'Mike',\n            color: '#F0F3F4'\n        }, {\n            name: 'November',\n            color: '#CACFD2'\n        }, {\n            name: 'Oscar',\n            color: '#AAB7B8'\n        }, {\n            name: 'Papa',\n            color: '#641E16'\n        }];\n        /**\r\n         * Class property for storing the initialized properties number\r\n         * @type {number}\r\n         * @default 0\r\n         */\n        this.initializedPropertiesCounter = 0;\n        /**\r\n         * Class property to hold all names of initialized properties\r\n         * @type {Array}\r\n         */\n        this.initializedProperties = [];\n        /**\r\n         * Class property for storing the last order number\r\n         * @type {number}\r\n         * @default 0\r\n         */\n        this.boxesOrderCounter = 0;\n        /**\r\n         * Class property to hold all active boxes\r\n         * @type {Array}\r\n         */\n        this.boxesPlaceholder = [];\n        /**\r\n         * Class property for reference to the box which is dragged now\r\n         * @type {HTMLElement}\r\n         * @default null\r\n         */\n        this.draggingNowBox = null;\n    }\n    /**\r\n     * Creates all required elements and adds boxes\r\n     * @memberof Boxes\r\n     * @namespace Boxes.init\r\n     * @return Doesn't return nothing\r\n     */\n\n\n    _createClass(Boxes, [{\n        key: 'init',\n        value: function init() {\n            // Create DIV element with class 'main-draggable-delete'\n            var deleteBoxesContainerElement = document.createElement('div');\n            deleteBoxesContainerElement.classList.add('main-draggable-delete');\n\n            // Create SPAN element with classes 'icon', 'hovered'\n            var iconSpanElement = document.createElement('span');\n            iconSpanElement.classList.add('icon', 'hovered');\n\n            // Create IMG element with src pointing to 'img/trash.svg'\n            var trashImgElement = document.createElement('img');\n            trashImgElement.src = 'img/trash.svg';\n\n            // Create DIV element with class 'overlay'\n            var iconOverlayElement = document.createElement('div');\n            iconOverlayElement.classList.add('overlay');\n\n            // Append iconSpanElement to deleteBoxesContainerElement\n            deleteBoxesContainerElement.appendChild(iconSpanElement);\n\n            // Append iconOverlayElement to deleteBoxesContainerElement\n            deleteBoxesContainerElement.appendChild(iconOverlayElement);\n\n            // Append trashImgElement to iconSpanElement\n            iconSpanElement.appendChild(trashImgElement);\n\n            // Append deleteBoxesContainerElement to the target container for boxesOrderCounter\n            this.targetContainer.appendChild(deleteBoxesContainerElement);\n\n            // Start loop to create boxes\n            for (var x = 0; x < this.numberOfBoxes; x++) {\n\n                // Create DIV element with clas 'main-draggable-box'\n                var box = document.createElement('div');\n                box.classList.add('main-draggable-box');\n\n                // Set the width and height to be equal\n                box.style.width = 'calc(' + this.boxDimensions + '% - 20px)';\n                box.style.height = 'calc(' + this.boxDimensions + '% - 20px)';\n\n                // Set data-order attribute with value of current boxesOrderCounter numberOfBoxes\n                box.setAttribute('data-order', this.boxesOrderCounter);\n\n                // Set background color, innerHTML and dara-name attribute to the ones from current box property\n                box.style.backgroundColor = this.boxesProperties[this.initializedPropertiesCounter]['color'];\n                box.innerHTML = '<p>' + this.boxesProperties[this.initializedPropertiesCounter]['name'] + '</p>';\n                box.setAttribute('data-name', this.boxesProperties[this.initializedPropertiesCounter]['name']);\n\n                // Update array of initializedProperties pushing the name of the property and increase initializedPropertiesCounter and boxesOrderCounter with 1\n                this.initializedProperties.push(this.boxesProperties[this.initializedPropertiesCounter]['name']);\n                this.initializedPropertiesCounter++;\n                this.boxesOrderCounter++;\n\n                // Push the box to boxesPlaceholder array\n                this.boxesPlaceholder.push(box);\n\n                // Append the box to targetContainer\n                this.targetContainer.appendChild(box);\n                box.style.width = box.getBoundingClientRect().width - 1.5 + 'px';\n                box.style.height = box.getBoundingClientRect().height - 1.5 + 'px';\n            }\n\n            // After the loop finish call addDraggable to apply functionality\n            this.addDraggable();\n        }\n        /**\r\n         * Applies event listeners for events like: mousedown, mousemove, mouseup to window object and adds functions to controll interactions with boxes\r\n         * @memberof Boxes\r\n         * @namespace Boxes.addDraggable\r\n         */\n\n    }, {\n        key: 'addDraggable',\n        value: function addDraggable() {\n            // Create reference to this for localscope\n            var that = this;\n            // initialize variable for the cloned dragged element - default null\n            var draggedClone = null;\n            // Save the index of the currently dragged element\n            var draggingNowIndex = null;\n\n            /**\r\n             * Function to handle mousedown event listener\r\n             * @param  {Object} evt The event object\r\n             * @memberof Boxes.addDraggable\r\n             */\n            function onMouseDown(evt) {\n                // Set evt.target to variable target\n                var target = evt.target;\n                // Check if target class list contains main-draggable-box and check if it's left mouse button\n                if (target.classList.contains('main-draggable-box') && evt.which === 1) {\n                    // clone the selected box and add class 'dragged'\n                    draggedClone = target.cloneNode(true);\n                    draggedClone.classList.add('dragged');\n                    // Add class 'dragging-now' to the selected box from the grid and set instance draggingNow property to the target\n                    target.classList.add('dragging-now');\n                    that.draggingNowBox = target;\n                    // Set position absolute to cloned element and width and height to tergets width and height\n                    draggedClone.style.position = 'absolute';\n                    draggedClone.style.width = target.getBoundingClientRect().width + 'px';\n                    draggedClone.style.height = target.getBoundingClientRect().height + 'px';\n                    // Append the cloned element to instance property targetContainer\n                    that.targetContainer.appendChild(draggedClone);\n                    // Add display block to show deleteBoxesContainerElement\n                    that.targetContainer.querySelector('.main-draggable-delete').style.display = \"block\";\n                    // Add mousemove event listener to window object\n                    window.addEventListener('mousemove', moveBox, true);\n                }\n            };\n\n            /**\r\n             * Function to handle the movement of the boxes\r\n             * @param  {Object} evt The event object\r\n             * @memberof Boxes.addDraggable\r\n             */\n            function moveBox(evt) {\n                // Check if we have draggedClone and draggingNowBox set\n                if (that.draggingNowBox != null && draggedClone != null) {\n                    // Get current boxes from targetContainer\n                    var currentBoxes = that.targetContainer.querySelectorAll('.main-draggable-box');\n                    // Update the cloned element top and left positions\n                    draggedClone.style.top = evt.clientY - draggedClone.getBoundingClientRect().height / 1.5 + 'px';\n                    draggedClone.style.left = evt.clientX - draggedClone.getBoundingClientRect().width / 2 + 'px';\n                    // Check if the cloned(dragged) box is over delete icon\n                    if (document.elementFromPoint(evt.clientX, evt.clientY) == document.querySelector('.main-draggable-delete .overlay')) {\n                        // If it is add class 'hovered' to the icon and class 'delete' to cloned(dragged) box - this is for styling\n                        document.querySelector('.main-draggable-delete .icon').classList.add('hovered');\n                        draggedClone.classList.add('delete');\n                    } else {\n                        // Else remove the above classes applied\n                        document.querySelector('.main-draggable-delete .icon').classList.remove('hovered');\n                        draggedClone.classList.remove('delete');\n                    }\n                    // Loop through currentBoxes and check if the cloned(dragged) box is at least 1/3 from its width or height over another box and if it is swap their places\n                    for (var i = 0; i < currentBoxes.length; i++) {\n                        var box = currentBoxes[i];\n                        var rectBox = box.getBoundingClientRect();\n                        var rectDragged = draggedClone.getBoundingClientRect();\n                        if (rectBox.top + rectBox.height / 3 <= rectDragged.bottom && rectBox.bottom + rectBox.height / 3 >= rectDragged.top && rectBox.left + rectBox.width / 3 <= rectDragged.right && rectBox.right + rectBox.width / 3 >= rectDragged.left && box.classList.contains('dragged') === false) {\n                            draggingNowIndex = i;\n                            that.targetContainer.insertBefore(that.draggingNowBox, box.nextSibling);\n                            that.reorderBoxes(0);\n                        }\n                    }\n                }\n            };\n\n            // Add mousedown event listener to window element with onMouseDown function as argument\n            window.addEventListener('mousedown', onMouseDown, false);\n\n            // Add mousedown event listener to window element with callback function as argument, or with other words when the left mouse button is released\n            window.addEventListener('mouseup', function (evt) {\n                // Set event variable to evt\n                var event = evt;\n                // Check if draggedClone exist and if have class 'dragged' and if is left button of the mouse\n                if (draggedClone != null && draggedClone.classList.contains('dragged') && evt.which === 1) {\n                    // Check if the targetContainer have the cloned element already existing\n                    if (that.targetContainer.contains(draggedClone)) {\n                        // If it is there remove it from targetContainer\n                        that.targetContainer.removeChild(draggedClone);\n                        // Remove class 'dragging-now' from the element which was dragged and set the width and height to 0px\n                        that.draggingNowBox.classList.remove('dragging-now');\n                        // Hide deleteBoxesContainerElement\n                        document.querySelector('.main-draggable-delete').style.display = 'none';\n                        // Check if draggingNowBox is set and if the event target is overlay div ( it is set to be invisible div with higher index, so when clonned element is on top of it to simulate that is on top of delete icon )\n                        if (that.draggingNowBox != null && event.target.classList.contains('overlay')) {\n                            // Add class 'deleted' to the elemnt to be deleted\n                            that.draggingNowBox.classList.add('deleted');\n                            // Remove the box from the boxesPlaceholder array and initializedProperties array\n                            that.boxesPlaceholder.splice(parseInt(that.draggingNowBox.getAttribute('data-order')), 1);\n                            that.initializedProperties.splice(parseInt(that.draggingNowBox.getAttribute('data-order')), 1);\n                            // Decrease the initializedPropertiesCounter with 1\n                            that.initializedPropertiesCounter--;\n                            // Call reorderBoxes with passing the order number from which to start reordering the boxes\n                            // Set draggingNowBox back to null\n                            that.draggingNowBox = null;\n                            // Decrease boxesOrderCounter with 1\n                            that.boxesOrderCounter--;\n                            // Timeout for removing the box from the DOM\n                            setTimeout(function () {\n                                document.querySelector('.deleted').remove();\n                                that.reorderBoxes(0);\n                            }, 301);\n                        } else if (that.draggingNowBox != null && event.target.classList.contains('main-draggable-box')) {\n                            // Else if we are over a box with class 'main-draggable-box' means we need to reorder boxes and call reorderBoxes with starting index of 0\n                            that.reorderBoxes(0);\n                        } else {\n                            // else if non of the above unset draggedClone and draggingNowBox\n                            draggedClone = null;\n                            that.draggingNowBox = null;\n                        }\n                    }\n                }\n                // Remove the event listeners\n                window.removeEventListener('mousemove', moveBox, true);\n                window.removeEventListener('mousedown', onMouseDown, true);\n            }, true);\n        }\n        /**\r\n         * Reorders the boxes in the grid\r\n         * @param  {number} start Index from which to start reordering\r\n         * @memberof Boxes\r\n         * @namespace Boxes.reorderBoxes\r\n         */\n\n    }, {\n        key: 'reorderBoxes',\n        value: function reorderBoxes(start) {\n            // Set startFrom variable to start\n            var startFrom = start;\n            // Empty initializedProperties array\n            this.initializedProperties = [];\n            // Get current boxes from targetContainer\n            var currentBoxes = this.targetContainer.querySelectorAll('.main-draggable-box');\n            // Loop through currentBoxes with starting index of start\n            for (var i = start; i < currentBoxes.length; i++) {\n                var thisBox = currentBoxes[i];\n                // If startFrom index is 0\n                if (startFrom === 0) {\n                    // Set new data-order atteribute to equal the loop index\n                    thisBox.setAttribute('data-order', i);\n                } else {\n                    // Else means its reordering from other index and we are setting data-order attribute to current value -1\n                    thisBox.setAttribute('data-order', parseInt(thisBox.getAttribute('data-order')) - 1);\n                }\n            }\n            // Recreate initializedProperties array with new boxes order\n            for (var _i = 0; _i < currentBoxes.length; _i++) {\n                var _thisBox = currentBoxes[_i];\n                this.initializedProperties.push(_thisBox.getAttribute('data-name'));\n            }\n        }\n        /**\r\n         * Adds new boxes to targetContainer\r\n         * @memberof Boxes\r\n         * @namespace Boxes.addBox\r\n         */\n\n    }, {\n        key: 'addBox',\n        value: function addBox() {\n            // Create new box and set properties for it\n            var box = document.createElement('div');\n            box.classList.add('main-draggable-box');\n            box.style.width = 'calc(' + this.boxDimensions + '% - 20px)';\n            box.style.height = 'calc(' + this.boxDimensions + '% - 20px)';\n            box.setAttribute('data-order', this.boxesOrderCounter);\n            // Check if we already have a box with this properties and if not set them and break the loop\n            for (var i = 0; i < this.boxesProperties.length; i++) {\n                if (this.initializedProperties.indexOf(this.boxesProperties[i]['name']) == -1) {\n                    this.boxesPlaceholder.push(box);\n                    box.setAttribute('data-name', this.boxesProperties[i]['name']);\n                    box.style.backgroundColor = this.boxesProperties[i]['color'];\n                    box.innerHTML = '<p>' + this.boxesProperties[i]['name'] + '</p>';\n                    this.initializedPropertiesCounter++;\n                    this.boxesOrderCounter++;\n                    this.targetContainer.appendChild(box);\n                    this.reorderBoxes(0);\n                    break;\n                }\n            }\n        }\n        /**\r\n         * Shuffles the boxes and updates arrays\r\n         * @memberof Boxes\r\n         * @namespace Boxes.shuffleBoxes\r\n         */\n\n    }, {\n        key: 'shuffleBoxes',\n        value: function shuffleBoxes() {\n            // Call the shuffler function and pass boxesPlaceholder and initializedProperties arrays\n            this.shuffler(this.boxesPlaceholder, this.initializedProperties);\n            var oldDimensions = void 0;\n            // Remove all current boxes\n            for (var i = this.targetContainer.children.length - 1; i >= 0; i--) {\n                if (this.targetContainer.children[i].classList.contains('main-draggable-box')) {\n                    this.targetContainer.children[i].classList.add('deleted');\n                    if (i === 0) {\n                        oldDimensions = this.targetContainer.children[i].getBoundingClientRect.width;\n                    }\n                }\n            }\n            var that = this;\n            var boxesToDelete = document.querySelectorAll('.deleted');\n            setTimeout(function () {\n                for (var _i2 = 0; _i2 < boxesToDelete.length; _i2++) {\n                    boxesToDelete[_i2].remove();\n                }\n                // Recreate boxes from new boxesPlaceholder array order and set proper data-order attributes\n                for (var _i3 = 0; _i3 < that.boxesPlaceholder.length; _i3++) {\n                    that.targetContainer.appendChild(that.boxesPlaceholder[_i3]);\n                    that.boxesPlaceholder[_i3].setAttribute('data-order', _i3);\n                    that.boxesPlaceholder[_i3].classList.remove('deleted');\n                }\n            }, 300);\n        }\n    }, {\n        key: 'shuffler',\n\n        /**\r\n         * Takes 2 arrays and shuffles their elements\r\n         * @param  {Array} arr1     Array 1 to shuffle\r\n         * @param  {Array} arr2     Array 2 to shuffle\r\n         * @memberof Boxes\r\n         * @namespace Boxes.shuffler\r\n         */\n        value: function shuffler(arr1, arr2) {\n            for (var j, x, y, z, i = arr1.length, y = arr2.length; i, y; j = parseInt(Math.random() * i), x = arr1[--i], arr1[i] = arr1[j], arr1[j] = x, z = arr2[--y], arr2[y] = arr2[j], arr2[j] = z) {}\n        }\n    }]);\n\n    return Boxes;\n}();\n// Entry point\n\n\n'use strict';\n\nvar draggableContainer = document.getElementById('main-draggable');\nvar boxes = new Boxes(12, 4, draggableContainer, '200px');\nboxes.init();\n\ndocument.getElementById('add-new-boxes').addEventListener('click', function () {\n    boxes.addBox();\n}, false);\n\ndocument.getElementById('shuffle-boxes').addEventListener('click', function () {\n    boxes.shuffleBoxes();\n}, false);"]}